<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dictionaries :: Data Structures in C#</title><link>https://textbooks.cs.ksu.edu/cis300/dictionaries/</link><description>Dictionaries A common problem in computing is that of keyed storage and retrieval. Specifically, we have a number of data items, each having a unique key. This key may be any type, and is used to find the associated data item; i.e., given a key we need to find the data item associated with that key. A data structure that provides this kind of access is called a dictionary. In this chapter, we will examine a dictionary class provided by .</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis300/dictionaries/index.xml" rel="self" type="application/rss+xml"/><item><title>The Dictionary&lt;TKey, TValue> Class</title><link>https://textbooks.cs.ksu.edu/cis300/dictionaries/dictionary-tkey-tvalue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/dictionaries/dictionary-tkey-tvalue/</guid><description>The Dictionary&lt;TKey, TValue> Class In this section, we will discuss the use of the Dictionary&lt;TKey, TValue> class, which implements a dictionary. In the next section, we will discuss how this data structure can be implemented using a linked list. In subsequent sections, we will consider alternative implementations.
Note that the Dictionary&lt;TKey, TValue> type has two type parameters, TKey and TValue. TKey is the type of the keys, and TValue is the type of the values (i.</description></item><item><title>Implementing a Dictionary with a Linked List</title><link>https://textbooks.cs.ksu.edu/cis300/dictionaries/linked-list-impl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/dictionaries/linked-list-impl/</guid><description>Implementing a Dictionary with a Linked List One way of implementing a dictionary is to store all the keys and values in a linked list. We want to do this in such a way that a key is stored together with its associated value. To facilitate this, .NET provides a structure KeyValuePair&lt;TKey, TValue> in the System.Collections.Generic namespace. This structure is used simply for storing a key and a value. The type parameter TKey is used to define the type of the keys, and the other type parameter TValue is used to define the type of the values.</description></item><item><title>Implementing a Dictionary with an Array-Like Structure</title><link>https://textbooks.cs.ksu.edu/cis300/dictionaries/binary-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/dictionaries/binary-search/</guid><description>Implementing a Dictionary with an Array-Like Structure In the previous section, we discussed how linked lists could be used to implement a dictionary. An alternative to a linked list would be an array. A couple of other alternatives are the non-generic System.Collections.ArrayList or the generic System.Collections.Generic.List&lt;T>. These classes are similar to singly-dimensioned arrays, but they can grow as needed. In this respect, they are like a StringBuilder, but instead of storing chars, an ArrayList stores object?</description></item></channel></rss>