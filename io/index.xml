<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Input/Output :: Data Structures in C#</title><link>https://textbooks.cs.ksu.edu/cis300/io/</link><description>Input/Output Input and output are central concepts to computing - in order to be able to accomplish a computational task, a program must typically process some input and produce some output. Input and output may be presented in a variety of ways. For example, many programs communicate with users through a graphical user interface, or GUI. In the simplest case, the user performs some action, such as clicking the mouse on a button, thus signaling an event.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis300/io/index.xml" rel="self" type="application/rss+xml"/><item><title>Dialogs</title><link>https://textbooks.cs.ksu.edu/cis300/io/dialogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/io/dialogs/</guid><description>Dialogs Dialogs are windows displayed by a program for the purpose of exchanging specific information with the user. There are two kinds of dialogs:
Modal dialogs block all other interaction with the program until the dialog is closed. Non-modal dialogs allow the user to interact with the program in other ways while the dialog is open. We will examine three classes provided by Microsoft® .NET 6, each of which implements a modal dialog.</description></item><item><title>Simple Text File I/O</title><link>https://textbooks.cs.ksu.edu/cis300/io/simple-text-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/io/simple-text-file/</guid><description>Simple Text File I/O Many of the I/O tools provided by .NET are found in the System.IO namespace. One class that provides several general-purpose static methods related to file I/O is the File class. Two of the static methods provided by this class are:
File.ReadAllText and File.WriteAllText The File.ReadAllText method takes a string as its only parameter. This string should give the path to a text file. It will then attempt to read that entire file and return its contents as a string.</description></item><item><title>Exception Handling</title><link>https://textbooks.cs.ksu.edu/cis300/io/exceptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/io/exceptions/</guid><description>Exception Handling As was mentioned in the previous section, various problems can occur when doing file I/O. Some of these problems include:
Trying to write to a read-only file. Trying to access a file that is locked by another process. Accessing an external drive that becomes disconnected. Note that some of these issues are beyond the programmer’s control, while others may be tedious for the programmer to check. When one of these problems prevents an I/O operation from completing successfully, an exception is thrown.</description></item><item><title>Advanced Text File I/O</title><link>https://textbooks.cs.ksu.edu/cis300/io/advanced-text-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/io/advanced-text-file/</guid><description>Advanced Text File I/O Though the File.ReadAllText and File.WriteAllText methods provide simple mechanisms for reading and writing text files, they are not always the best choices. For one reason, files can be very large — too large to fit into memory, or possibly even larger than the maximum length of a string in C# (2,147,483,647 characters). Even when it is possible to store the entire contents of a file as a string, it may not be desirable, as the high memory usage may degrade the overall performance of the system.</description></item><item><title>Other File I/O</title><link>https://textbooks.cs.ksu.edu/cis300/io/other-file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/io/other-file-io/</guid><description>Other File I/O Not all files are plain text files — often we need to read and/or write binary data. .NET provides the FileStream class for this purpose.
The FileStream class provides constructors for creating a FileStream for reading, writing, or both. These constructors can be used to specify how the file is to be opened or created, the type of access to be allowed (i.e., reading/writing), and how the file is to be locked.</description></item></channel></rss>