




	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on Data Structures in C#</title>
    <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/index.html</link>
    <description>Recent content in Visual Studio on Data Structures in C#</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://ksu-cs-textbooks.github.io/cis300/appendix/vs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Visual Studio</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/installing-vs/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/installing-vs/index.html</guid>
      <description>Installing Visual Studio Visual Studio Community 2022 is available on the machines we use for CIS 300 labs, as well as on machines in other lab classrooms. Students can also access Visual Studio via a remote desktop server &amp;mdash; see the CS Department Support Wiki for details. This edition of Visual Studio is also freely available for installation on your own PC for your personal and classroom use. This section provides instructions for obtaining this software from Microsoft and installing it on your PC.</description>
    </item>
    <item>
      <title>Git Repositories</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/repos/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/repos/index.html</guid>
      <description>Git Repositories In CIS 300, start code for each assignment will be distributed via a Git repository. Git is a source control system integrated into Visual Studio 2022. Source control systems are powerful mechanisms for teams of programmers and other collaborators to manage multiple copies of various source files and other documents that all collaborators may be modifying. While CIS 300 does not involve teamwork, source control provides a convenient mechanism for distribution of code and submission of assignment solutions.</description>
    </item>
    <item>
      <title>Visual Studio Solutions</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/solutions/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/solutions/index.html</guid>
      <description>Visual Studio Solutions All code developed within Visual Studio 2022 must belong to one or more solutions. When you are using Visual Studio to develop a program, you will be working with a single solution. A solution will contain one or more projects. Each of these projects may belong to more than one solution. Each project typically contains several files, including source code files. Each file will typically belong to only one project.</description>
    </item>
    <item>
      <title>The Design Window</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/design-window/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/design-window/index.html</guid>
      <description>The Design Window The Design Window in Visual Studio is a window used to build graphical components. To open the Design Window for a graphical component, double-click on the component&amp;rsquo;s file name in the Solution Explorer. If you are working through the example from the previous two sections, double-click &amp;ldquo;UserInterface.cs&amp;rdquo; to open its Design Window. It will initially contain a blank form:
You can resize the form by dragging the handles on the right and bottom edges.</description>
    </item>
    <item>
      <title>The Code Window</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/code-window/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/code-window/index.html</guid>
      <description>The Code Window In the previous section , we designed the following GUI:
We also indicated briefly how functionality could be added to the button by double-clicking it in the design window to create an event handler. Creating this event handler also opens the code window to display it. The code window for this file can also be displayed by pressing F7 in the design window or by right-clicking the source code file name in the Solution Explorer and selecting &amp;ldquo;View Code&amp;rdquo;.</description>
    </item>
    <item>
      <title>The Debugger</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/debugger/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/debugger/index.html</guid>
      <description>The Debugger In previous sections, we discussed how a Windows Forms Application can be built using Visual Studio. Having built an application, we need to be able to run and test it. To do this, we use the Visual Studio Debugger. When an application is loaded into Visual Studio, we can invoke the debugger by clicking the &amp;ldquo;Start Debugging&amp;rdquo; button near the top:
When the debugger starts, it attempts to do the following things:</description>
    </item>
    <item>
      <title>Submitting Assignments</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/submitting/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/submitting/index.html</guid>
      <description>Submitting Assignments To submit a lab or homework assignment in CIS 300, you will need to do the following steps:
Commit your changes to your local Git repository. You will do this through the &amp;ldquo;Git Changes&amp;rdquo; tab in Visual Studio (if you don&amp;rsquo;t see this tab, click the icon that looks like a pencil at the bottom of the Visual Studio window). In the &amp;ldquo;Git Changes&amp;rdquo; tab, in the box that says &amp;ldquo;Enter a message &amp;lt;Required&amp;gt;&amp;rdquo;, type in a message to be associated with the changes you are committing.</description>
    </item>
    <item>
      <title>Unit Testing</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/nunit/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/nunit/index.html</guid>
      <description>Unit Testing Some of the lab assignments in CIS 300 use a technique called unit testing for testing the correctness of your code. Unit testing is an automated technique for testing individual public methods and properties using a pre-defined set of test cases. We will be using an open-source unit-testing framework called NUnit .
An NUnit test suite is a separate project contained within the same solution as the project it is to test.</description>
    </item>
    <item>
      <title>Using Multiple Machines</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/multiple/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/multiple/index.html</guid>
      <description>Using Multiple Machines Source control provides one way to access your code from multiple machines. Before you decide to do this, however, you should consider whether this is the best approach. For example, if you have a CS Account , you have a network file system (the U: drive on CS Windows systems) that you can use whenever you have internet access. From off campus, you need to tunnel into campus using a Virtual Private Network, or VPN (see the KSU Information Technology Services page on Virtual Private Networking for instructions).</description>
    </item>
    <item>
      <title>Checkpointing</title>
      <link>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/checkpointing/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis300/appendix/vs/checkpointing/index.html</guid>
      <description>Checkpointing Sometimes when writing code, we see that we have gone down a wrong path and would like to undo some major changes we have made. Source control can help us with this if we checkpoint by committing our changes from time to time, using commit messages that clearly describe the changes made in that commit. (Note that it is not necessary to push these commits to GitHub until you are ready to submit the assignment.</description>
    </item>
  </channel>
</rss>