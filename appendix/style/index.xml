<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming Style Requirements :: Data Structures in C#</title><link>https://textbooks.cs.ksu.edu/cis300/appendix/style/</link><description>Programming Style Requirements Software companies typically have programming style requirements to which their programmers must adhere. Many of these requirements have become industry standards. These requirements help to make the developed code more readable, portable, and maintainable. This appendix contains a short set (much shorter than what is typically found in industry) of programming style requirements for CIS 300. These requirements are consistent with Microsoft’s Naming Guidelines and de facto industry accepted practices.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis300/appendix/style/index.xml" rel="self" type="application/rss+xml"/><item><title>General Formatting</title><link>https://textbooks.cs.ksu.edu/cis300/appendix/style/formatting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/appendix/style/formatting/</guid><description>General Formatting All programming will be done using Microsoft Visual Studio® Community 2022. This integrated development environment (IDE) does a certain amount of formatting automatically. All code formatting should be consistent with what the IDE does automatically, including how it formats code stubs that it inserts. Specifically, all braces should occur on lines by themselves, vertically aligned so that matching braces occupy the same column. (An exception to this rule can be made when the braces enclose a single statement or a part of a statement, and they occur on the same line; however, if it is possible to omit the braces, as in an if statement, this is preferable to placing them on the same line.</description></item><item><title>Access Modifiers</title><link>https://textbooks.cs.ksu.edu/cis300/appendix/style/access-modifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/appendix/style/access-modifiers/</guid><description>Access Modifiers C# provides 4 access modifiers for classes, fields, etc.: public, internal, protected, and private. For simplicity, however, we will not allow the use of the internal or protected access modifiers unless they are required by the compiler (for example, when overriding a protected method).
When classes, fields, etc., are declared, C# does not require that an access modifier be used. If the access modifier is omitted, a default accessibility level will be used.</description></item><item><title>Naming Conventions</title><link>https://textbooks.cs.ksu.edu/cis300/appendix/style/naming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/appendix/style/naming/</guid><description>Naming Conventions The naming conventions described below use the following terminology:
Pascal case: Multiple words are joined without spaces, using capital letters at the beginning of each word. If acronyms of 3 or more letters are included, only the first letter of the acronym is capitalized. For example, AverageAge, ContextBoundObject, RgbCode. Camel case: The same as pascal case, except the first letter is not capitalized. For example, averageAge, contextBoundObject, rgbCode. Namespaces In CIS 300 programming assignments, namespace names will typically be provided.</description></item><item><title>Comments</title><link>https://textbooks.cs.ksu.edu/cis300/appendix/style/comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/appendix/style/comments/</guid><description>Comments Within each source code file that you edit, you will need to provide certain comments as documentation. Visual Studio® automatically generates some source code files that you will not need to modify — you don’t need to add comments to those files.
At the top of each file in which you provide code, add a comment of the following form:
/* filename.cs * Author: Name */where filename.cs is the name of the file, and Name is the name of the primary author.</description></item><item><title>Prohibited Features</title><link>https://textbooks.cs.ksu.edu/cis300/appendix/style/prohibited/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis300/appendix/style/prohibited/</guid><description>Prohibited Features The following features of C# should not be used on assignments or quizzes unless otherwise stated:
The goto statement: It has been over 50 years since Dijkstra published “Go To Statement Considered Harmful” (Communications of the ACM, vol. 11 (1968), pp. 147-148). I am amazed that languages continue to include this statement.
The unsafe keyword: The name pretty much says it all.
The var keyword: There are very few contexts in which this is needed, and these contexts won’t occur in this class.</description></item></channel></rss>