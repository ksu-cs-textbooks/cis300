<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>A Simple Hash Table Implementation</title>
<link rel=STYLESHEET href="/~rhowell/style.css">

</head>

<body>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/rehashing">Next: Rehashing
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/dictionaries">Up: 
      Hash Tables
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<h1>A Simple Hash Table Implementation</h1>

In this section, we will look at a simple hash table implementation
    using a fixed-length table.  In subsequent sections, we will
    consider how to adjust the table size for better performance, as
    well as how to implement enumerators for iterating through the
    keys and/or values.
<p>
</p>
At the core of our implementation is the computation of the hash
    function.  Recall that the implementation of the hash function
    computation is divided into two parts.  The first part of the
    computation is implemented within the definition of the key type
    via its <b>GetHashCode</b> method.  We will discuss this part of
    the computation in the section, "<a
    href="/~rhowell/DataStructures/redirect/hash-functions">Hash
    Codes</a>".  Here, we will focus on the second step, converting
    the <b>int</b> hash code 
    returned by the key's <b>GetHashCode</b> method to a table
    location.
<p>
One common technique, which is used in the .NET implementation of the
      <a
      href="http://msdn.microsoft.com/en-us/library/xfhwa508.aspx"><b>Dictionary&lt;TKey,&nbsp;TValue&gt;</b></a>
      class, is called the <i>division method</i>.  This technique
      consists of the following:
</p>
<ol>
<li> Reset the sign bit of the hash code to 0.</li>
<li> Compute the remainder of dividing this value by the length of the
	table.</li>
</ol>
If <tt>p</tt> is a nonnegative <b>int</b> and <tt>q</tt> is a positive
    <b>int</b>, then <tt>p&nbsp;%&nbsp;q</tt> gives a nonnegative
    value less than <tt>q</tt>; hence, if <tt>q</tt> is the table
    length, <tt>p&nbsp;%&nbsp;q</tt> is a location within the table.
    Furthermore, this calculation often does a good job of distributing hash
    code values among the different table locations, but this depends
    on how the hash codes were computed and what the length of the
    table is.

<p>
For example, suppose we use a size 2<sup><i>k</i></sup> for some
      positive integer <i>k</i>.  In this case, the above computation
      can be simplified, as the values formed by <i>k</i> bits are 0
      through 2<sup><i>k</i></sup>&nbsp;-&nbsp;1, or all of the
      locations in the table.  We can therefore simply use the
      low-order <i>k</i> bits of the hash code as the table location.
      However, it turns out that using the division method when the
      table size is a power of 2 can lead to poor key distribution for
      some common hash code schemes.  To
      avoid these problems, a prime number should be used as the table
      length.  When a prime number is used, the division method tends
      to result in a good distribution of the keys.
</p>
The reason we need to reset the sign bit of the hash code to 0 is to
    ensure that the first operand to the % operator is nonnegative,
    and hence that the result is nonnegative.  Furthermore, simply
    taking the absolute value of the hash code won't always work
    because -2<sup>31</sup> can be stored in an <b>int</b>, but
    2<sup>31</sup> is too large.  Resetting the sign bit to 0 is a
    quick way to ensure we have a nonnegative value without losing any
    additional information.

<p></p>
We can do this using a bitwise AND operator, denoted
    by a single ampersand (&amp;).  This
    operator operates on the individual bits of an integer type such
    as <b>int</b>.  The logical AND of two 1 bits is 1; all other
    combinations result in 0.  Thus, if we want to set a bit to 0, we
    AND it with 0, and ANDing a bit with 1 will leave it unchanged.
    The sign bit is the high-order bit; hence, we want to AND the hash
    code with an <b>int</b> whose first bit is 0 and whose remaining
    bits are 1.  The easiest way to write this value is using
    hexadecimal notation, as each hex digit corresponds to exactly
    four bits.  We begin writing a hexadecimal value with "0x".  The
    first four bits need to be a 0, followed by three 1s.  These three
    1s are in the 1, 2, and 4 bit positions; hence, the value of this
    hex digit should be 7.  We then want seven more hex digits, each
    containing four 1s.  An additional 1 in the 8 position gives us a
    sum of 15, which is denoted as either 'f' or 'F' in hex.  We can
    therefore reset the sign bit of an <b>int</b> <tt>i</tt> as
    follows:
<pre>
i = i &amp; 0x7fffffff;
</pre>
<p></p>
Now let's consider how we would look up a key.  First, we need to
    obtain the key's hash code by calling its <b>GetHashCode</b>
    method.  From the hash code, we use the division method to compute
    the table location where it belongs.  We then search the linked
    list for that key.
<p>
Adding a key and a value is done similarly.  We first look for the key
      as described above.  If we find it, we either replace its
      <b>KeyValuePair</b> with a new one containing the new value, or
      we throw an exception, depending on how we want this method to
      behave.  If we don't find it, we add a new cell containing the
      given key and value to the beginning of the list we searched.
</p>
Note that looking up a key or adding a key and a value as described
    above can be
    implemented using either methods or indexers (the .NET Framework
    uses both).  See the section, "<a
    href="/~rhowell/DataStructures/redirect/indexers">Indexers</a>"
    for details on how to implement an indexer.
<p></p>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/rehashing">Next: Rehashing
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/dictionaries">Up: 
      Hash Tables
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<p>
<small>
<!-- hhmts start -->
Last modified: Thu Mar 29 09:45:47 CDT 2018
<!-- hhmts end -->
</small>
</p>
<small>
    <i> &copy; Copyright 2014, 2015, 2017, 2018, <a
    href="/~rhowell/">Rod Howell</a>. All
    rights reserved.</i> 
</small>

<p></p>

<table border=0 cellpadding=2 summary="This table is used for layout
purposes only.">
<tr>
<td align=center>
    <a href="http://validator.w3.org/check/referer"><img border="0"
        src="/~rhowell/valid-html401.gif"
        alt="Valid HTML 4.01!" height="31" width="88"></a>
</td>
<tr>
<td>
<a href="http://jigsaw.w3.org/css-validator/check/referer">
             <img border="0"
                  src="/~howell/vcss.gif" 
                  alt="Valid CSS!" height="31" width="88">
            </a>
</td>
</table>

</body>

</html>
