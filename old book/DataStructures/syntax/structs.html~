<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Structures</title>
<link rel=STYLESHEET href="/~rhowell/style.css">

</head>

<body>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/decimals">Next: The decimal
      Type 
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a 
      href="/~rhowell/DataStructures/redirect/enumerations">Previous:
      Enumerations 
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/syntax">Up: C# Syntax
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<h1>Structures</h1>

A structure is similar to a class, except that it is a <a
    href="/~rhowell/DataStructures/redirect/reference-value">value type</a>, 
    whereas a class is a <a
    href="/~rhowell/DataStructures/redirect/reference-value">reference
    type</a>.  A structure definition looks 
    a lot like a class definition; for example, the following
    defines a structure for storing information associated with a
    name: 
<pre>
/// &lt;summary&gt;
/// A structure containing a name, frequency, and rank.
/// &lt;/summary&gt;
public struct NameInformation
{
    /// &lt;summary&gt;
    /// The name.
    /// &lt;/summary&gt;
    private string _name;

    /// &lt;summary&gt;
    /// The frequency.
    /// &lt;/summary&gt;
    private float _frequency;

    /// &lt;summary&gt;
    /// The rank.
    /// &lt;/summary&gt;
    private int _rank;

    /// &lt;summary&gt;
    /// Gets the name.
    /// &lt;/summary&gt;
    public string Name
    {
        get
        {
            return _name;
        }
    }

    /// &lt;summary&gt;
    /// Gets the frequency.
    /// &lt;/summary&gt;
    public float Frequency
    {
        get
        {
            return _frequency;
        }
    }

    /// &lt;summary&gt;
    /// Gets the rank.
    /// &lt;/summary&gt;
    public int Rank
    {
        get
        {
            return _rank;
        }
    }

    /// &lt;summary&gt;
    /// Constructs a new NameInformation containing the given name,
    /// frequency, and rank.
    /// &lt;/summary&gt;
    /// &lt;param name="name"&gt;The name.&lt;/param&gt;
    /// &lt;param name="frequency"&gt;The frequency.&lt;/param&gt;
    /// &lt;param name="rank"&gt;The rank.&lt;/param&gt;
    public NameInformation(string name, float frequency, int rank)
    {
        _name = name;
        _frequency = frequency;
        _rank = rank;
    }
}
</pre>
Note that the above definition looks just like a class definition,
    except that the keyword <b>struct</b> is used instead of the
    keyword <b>class</b>.  A structure can be defined anywhere a class
    can be defined.  However, there are several restrictions on what
    a structure definition may contain.  Some of the more important
    restrictions include: 
<ul>
<li> A field may not be initialized in the statement that defines it
	unless it is declared to be <a
	href="/~rhowell/DataStructures/redirect/const"><b>const</b></a>
	or <a
	href="/~rhowell/DataStructures/redirect/static-this"><b>static</b></a>.
	For example, while the following would be allowed in a class
	definition, it is not allowed in a structure definition:
<pre>
private int _rank = -1;
</pre>
These fields are instead automatically initialized to the default
	values for their types.  If you want to initialize a field to
	another value, you will need to use a constructor (but see the
	next restriction). </li>
<li> All constructors must contain at least one parameter.  There will
	always be a default constructor containing no parameters.  It
	will initialize all non-<b>static</b>, non-<b>const</b> fields
	to the default values for their types. </li>
<li> A field may not be defined to have same type as the structure
	containing it.  For example, the following is not allowed:
<pre>
public struct S
{
    private S _nextS;
    . . .
}
</pre>
</li>
</ul>
For more information on structures, see the sections, "<a
	  href="http://msdn.microsoft.com/en-us/library/saxz13w4.aspx">Structs</a>"
	  and "<a
	  href="http://msdn.microsoft.com/en-us/library/0taef578.aspx">Using
	  Structs</a>" in the C# Programming Guide.
<p></p>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/decimals">Next: The decimal
      Type 
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a 
      href="/~rhowell/DataStructures/redirect/enumerations">Previous:
      Enumerations 
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/syntax">Up: C# Syntax
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<p>
<small>
<!-- hhmts start -->
Last modified: Tue Dec 31 13:19:44 CST 2013
<!-- hhmts end -->
</small>
</p>
<small>
    <i> &copy; Copyright 2013, <a
    href="/~rhowell/">Rod Howell</a>. All
    rights reserved.</i> 
</small>

<p></p>

<table border=0 cellpadding=2 summary="This table is used for layout
purposes only.">
<tr>
<td align=center>
    <a href="http://validator.w3.org/check/referer"><img border="0"
        src="/~rhowell/valid-html401.gif"
        alt="Valid HTML 4.01!" height="31" width="88"></a>
</td>
<tr>
<td>
<a href="http://jigsaw.w3.org/css-validator/check/referer">
             <img border="0"
                  src="/~howell/vcss.gif" 
                  alt="Valid CSS!" height="31" width="88">
            </a>
</td>
</table>

</body>

</html>
