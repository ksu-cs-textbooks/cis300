<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Traversing a Trie</title>
<link rel=STYLESHEET href="/~rhowell/style.css">

</head>

<body>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/word-games">Next: Tries in
      Word Games
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/tries-multiple-impl">Previous:
      Multiple Implementations of Children
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/tries">Up: Tries
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<h1>Traversing a Trie</h1>

As with other kinds of trees, there are occasions where we need to
    process all the elements stored in a trie in order.  Here, the
    elements are strings, which are not stored explicitly in the trie,
    but implicitly based on the labels of various nodes.  Thus, an
    individual node does not contain a <b>string</b>; however, if its
    <b>bool</b> has a value of <b>true</b>, then the path to that node
    describes a string stored in the trie.  We can therefore associate
    this string with this node.  Note that this string is a prefix of
    any string associated with any node in any of this node's
    children; hence, it is alphabetically less than any string found
    in any of the children.  Thus, in order to process each of the
    strings in alphabetic order, we need to do a <a
    href="/~rhowell/DataStructures/redirect/trees-intro">preorder
    traversal</a>, which processes the root before recursively
    processing the children.
<p>
In order to process the string associated with a node, we need
      to be able to retrieve this string.  Because we will have
      followed the path describing this string in order to get
      to the node associated with it, we can build this string
      on the way to the node and pass it as a parameter to the
      preorder traversal of the trie rooted at this node.  Because we
      will be building this string a character at a time, to do this
      efficiently we
      should use a <a
      href="/~rhowell/DataStructures/redirect/stringbuilders"><b>StringBuilder</b></a>
      instead of a <b>string</b>.  Thus, the preorder traversal method
      for a trie
      will take a <b>StringBuilder</b> parameter describing the path
      to that trie, in addition to any
      other parameters needed to process the strings associated with
      its nodes.
</p>
Before we present the algorithm itself, we need to address one more
    important issue.  We want the <b>StringBuilder</b> parameter to
    describe the path to the node we are currently working on.
    Because we will need to do a recursive call on each child, we will
    need to modify the <b>StringBuilder</b> to reflect the path to
    that child.  In order to be able to do this, we will need to
    ensure that the recursive calls don't change the contents of the
    <b>StringBuilder</b> (or more precisely, that they undo any
    changes that they make).  <p></p> Because we are implementing a
    preorder traversal, the first thing we will need to do is to
    process the root.  This involves determining whether the root is
    associated with a string contained in the trie, and if so,
    processing that string.  Determining whether the root is
    associated with a contained string is done by checking the
    <b>bool</b> at the root.  If it is <b>true</b>, we can convert the
    <b>StringBuilder</b> parameter to a <b>string</b> and process it
    by doing whatever processing needs to be done for each string in
    our specific application.
<p>
Once we have processed the root, we need to recursively process each of the
      children in alphabetic order of their labels.  How we accomplish
      this depends on how we are implementing the trie - we will
      assume the implementation of <a
      href="/~rhowell/DataStructures/redirect/tries-multiple-impl">the
      previous section</a>.  Because this implementation uses three
      different classes depending on how many children a node has, we
      will need to write three different versions of the preorder
      traversal, one for each class.  The root is handled in the same
      way (as described above) for each of these methods, but
      recursively processing the children requires different code
      depending on how the children are represented:
</p>
<ul>
<li> For a <b>TrieWithNoChildren</b>, there is nothing to do in this
      step.  </li> <li> Because a <b>TrieWithOneChild</b> has exactly
      one child, we need a single recursive call on this child.
      Before we make this call, we will need to append the child's
      label to the <b>StringBuilder</b>.  Following the recursive
      call, we will need to remove the character that we added by
      reducing its <a
      href="http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx"><b>Length</b></a>
      property by 1.  </li> <li> We handle a
      <b>TrieWithManyChildren</b> in a similar way as a
      <b>TrieWithOneChild</b> , only we will need to iterate through
      the array of children and process each non-<b>null</b> child
      with a recursive call.  Note that for each of these children,
      its label will need to be appended to the <b>StringBuilder</b>
      prior to the recursive call and removed immediately after.  We
      can obtain the label of a child by adding 'a' to its array index
      and <a
      href="/~rhowell/DataStructures/redirect/casts">casting</a> the
      result to a <b>char</b>. </li>
</ul>

<p></p>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/word-games">Next: Tries in
      Word Games
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/tries-multiple-impl">Previous:
      Multiple Implementations of Children
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/tries">Up: Tries
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<p>
<small>
<!-- hhmts start -->
Last modified: Tue Mar 25 10:15:42 CDT 2014
<!-- hhmts end -->
</small>
</p>
<small>
    <i> &copy; Copyright 2014, <a
    href="/~rhowell/">Rod Howell</a>. All
    rights reserved.</i> 
</small>

<p></p>

<table border=0 cellpadding=2 summary="This table is used for layout
purposes only.">
<tr>
<td align=center>
    <a href="http://validator.w3.org/check/referer"><img border="0"
        src="/~rhowell/valid-html401.gif"
        alt="Valid HTML 4.01!" height="31" width="88"></a>
</td>
<tr>
<td>
<a href="http://jigsaw.w3.org/css-validator/check/referer">
             <img border="0"
                  src="/~howell/vcss.gif" 
                  alt="Valid CSS!" height="31" width="88">
            </a>
</td>
</table>

</body>

</html>
