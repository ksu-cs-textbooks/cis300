<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>The Code Window</title>
<link rel=STYLESHEET href="/~rhowell/style.css">

</head>

<body>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/debugger">Next: The Debugger
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/design-window">Previous:
      The Design Window
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/visual-studio">Up:
      Visual Studio®
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<h1>The Code Window</h1>

In <a href="/~rhowell/DataStructures/redirect/design-window">the
      previous section</a>, we designed the following GUI:
<p>
<img src="hello-button.jpg"
      alt="A picture of a portion of the design window should appear
      here.">
</p>
We also indicated briefly how functionality could be added to the
    button by double-clicking it in the design window to create an
    event handler.  Creating this event handler also opens the <i>code
    window</i> to display it.  The code window for this file can also
    be displayed by pressing F7 in the display window or by
    right-clicking the source code file name in the Solution Explorer
    and selecting "View Code".  Once a code window has been opened, it
    can be brought to the front by clicking the tab containing its
    file name near the top of the Visual Studio window.  This window
    should look something like this:
<p>
<img src="code-window.jpg" alt="A picture of a window should appear here.">
</p>
<a href="Ksu.Cis300.HelloWorld.zip">Here is a ZIP archive containing
      the entire Visual Studio solution</a>.  After downloading it,
      you may need to navigate through a folder or two, but you should
      be able to find a file,
      <b>Ksu.Cis300.HelloWorld.sln</b> (the ".sln" suffix may not be
      visible, but it should show as type "Microsoft Visual Studio
      Solution").  If you double-click on this file, Visual Studio
      2015 should open the solution.
<p>
Note in the <b>class</b>
      statement the keyword, <b>partial</b>.  This indicates that not
      all of this class definition is in this file.  The remainder of
      the definition is in the file, <b>UserInterface.Design.cs</b>.
      Recall that that file contains code for laying out the GUI and
      making the <b>uxGo_Click</b> method an event handler for the
      "Go" button.  One of the method definitions that it contains is
      the <b>InitializeComponent</b> method, which does the layout of
      the GUI and sets up the event handlers.  Recall also that the
      <b>Main</b> method in <b>Program.cs</b> constructs an instance
      of this class, then displays it and begins processing events for
      it.  Because the constructor (see the code window above) calls the
      <b>InitializeComponent</b> method, everything will be set up to
      run the application - all that is needed is code for the event
      handler.  This code will then be executed every time the "Go"
      button is clicked.
</p>
In order for this code to provide meaningful functionality, it
    will need to interact with the controls on the GUI.  It needs to
    use their variable names to do this.  The name of the
    <b>TextBox</b> in this code is <tt>uxDisplay</tt> (recall that you
    can find this variable name by <a
    href="/~rhowell/DataStructures/redirect/design-window">opening the
    design window</a>, clicking on the control, and finding its
    "(Name)" property in its Properties window).  Suppose we want to
    respond to the event by placing the text, "Hello world!", in this
    <b>TextBox</b>.  We therefore need to change its <a
    href="http://msdn.microsoft.com/en-us/library/a19tt6sk(v=vs.110).aspx"><b>Text</b></a>
    <a
    href="/~rhowell/DataStructures/redirect/properties">property</a>
    to contain this string; i.e.:
<pre>
private void uxGo_Click(object sender, EventArgs e)
{
    uxDisplay.Text = "Hello world!";
}
</pre>
<p>
Notice that when you type a quote mark, a matching quote is automatically
      added following the text cursor.  As long as you don't
      reposition the text cursor, you can just type the closing quote
      as you normally would after typing the text string - Visual
      Studio won't insert another quote mark, but will move the text
      cursor past the one it inserted automatically.  The same
      behavior occurs when you type open parentheses, brackets, or
      braces.
</p>
While we are here, we should also add <a
      href="/~rhowell/DataStructures/redirect/comments">appropriate
      comments</a> to this method, the constructor,
      the class, and the file; for example:
<pre>
/* UserInterface.cs
 * Author: Rod Howell
 */
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Ksu.Cis300.HelloWorld
{
    /// &lt;summary&gt;
    /// A GUI for a Hello World program.
    /// &lt;/summary&gt;
    public partial class UserInterface : Form
    {
        /// &lt;summary&gt;
        /// Constructs the GUI.
        /// &lt;/summary&gt;
        public UserInterface()
        {
            InitializeComponent();
        }

        /// &lt;summary&gt;
        /// Handles a Click event on the "Go" button.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void uxGo_Click(object sender, EventArgs e)
        {
            uxDisplay.Text = "Hello world!";
        }
    }
}
</pre>
The code window has several features that help with code writing.  One
    of these features is auto-completion.  Often while you are typing
    code, an auto-complete list appears, often with an entry
    highlighted.  When an entry is highlighted (either automatically
    or by your selecting it manually), pressing "Enter" or typing a
    code element that can't be part of the name (such as "." or "+")
    will insert the completion
    into your code.  Once you get used to this feature, it can greatly
    speed up your code entry.  Furthermore, it can be a helpful
    reminder of what you might need to type next.  If you don't want a
    name to auto-complete (perhaps because it is a name you haven't
    defined yet), you can press "Esc", and the auto-complete list will
    disappear.
<p>
Another feature of the code window is parameter information that shows
      as a popup box when you are typing a parameter list in a method
      call; for example:
</p>
<img src=parameter-info.jpg 
    alt="A picture of part of an edit window should appear here.">
<p>
This popup box gives several pieces of information.  The first line
      gives the name of the method, followed by the parameter
      list, with the type of each parameter shown and the current
      parameter in bold face.  The second line gives a brief
      description of the method.  The last line gives a brief
      description of the current parameter.  When there are more than
      one method with the same name, this is indicated in the
      upper-left corner of the popup box ("1 of 21" in the figure
      above - the method shown is the first of 21 methods having that
      name).  You can use either the arrows in the popup box or the up
      and down arrows on the keyboard to scroll through these
      different methods.
</p>
A related feature allows certain information to be obtained by
    hovering the mouse over different code elements.  For example,
    hovering the mouse over an identifier will display the declaration
    and documentation for that identifier in a popup box.  Also,
    hovering the mouse over a syntax error (indicated by a red
    underline, as shown under "Show" in the above
    figure) will display an explanation of the error, in addition to
    any information on the code element.
<p>
Finally, Visual Studio gives rich support for renaming identifiers
      in a consistent way.  For example, suppose we have a method
      called <b>DoSomething</b>, and we want to rename it to
      <b>DoSomethingElse</b>.  We can make this change easily by first
      editing the name in the method definition.  This change will
      cause the method name to be highlighted as follows:
</p>
<img src="rename-box.jpg" 
    alt="A picture a of a part of a code window should appear here.">
<p>
If you hover your mouse over this box, two small popups will appear:
</p>
<img src="rename-popup.jpg"
    alt="A picture a of a part of a code window should appear here.">
<p>
Clicking on the light bulb will cause the following popup to appear:
</p>
<img src="rename-popup-menu.jpg"
alt="A picture of a part of a code window should appear here.">
<p>
Selecting the "Rename" entry from this popup will rename this method
      consistently throughout your solution, changing only those
      instances that refer to this method if there are other identifiers
      with the same name.  The same mechanism can be used to rename
      variables safely.
</p>

<p></p>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/debugger">Next: The Debugger
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/design-window">Previous:
      The Design Window
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/visual-studio">Up:
      Visual Studio®
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<p>
<small>
Visual Studio is either a registered trademark or a trademark of
	Microsoft Corporation in the United States and/or other
	countries.
</small>
</p>
<p>
<small>
<!-- hhmts start -->
Last modified: Fri Aug 14 15:14:16 CDT 2015
<!-- hhmts end -->
</small>
</p>
<small>
    <i> &copy; Copyright 2014, 2015, <a
    href="/~rhowell/">Rod Howell</a>. All
    rights reserved.</i> 
</small>

<p></p>

<table border=0 cellpadding=2 summary="This table is used for layout
purposes only.">
<tr>
<td align=center>
    <a href="http://validator.w3.org/check/referer"><img border="0"
        src="/~rhowell/valid-html401.gif"
        alt="Valid HTML 4.01!" height="31" width="88"></a>
</td>
<tr>
<td>
<a href="http://jigsaw.w3.org/css-validator/check/referer">
             <img border="0"
                  src="/~howell/vcss.gif" 
                  alt="Valid CSS!" height="31" width="88">
            </a>
</td>
</table>

</body>

</html>
