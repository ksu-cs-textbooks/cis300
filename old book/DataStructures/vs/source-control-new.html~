<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Source Control</title>
<link rel=STYLESHEET href="/~rhowell/style.css">

</head>

<body>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/class-libraries">Next:
      Class Libraries
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/debugger">Previous: The
      Debugger 
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
	href="/~rhowell/DataStructures/redirect/visual-studio">Up:
      Visual Studio®
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<h1>Source Control</h1>

Source control systems are powerful mechanisms for teams of
    programmers and other collaborators to manage multiple copies of
    various source files that all may be modifying.  CIS 300 does not
    involve teamwork or other collaboration but there are some
    advantages to using the source control provided by Visual Studio:
<ul>
<li> Once source control is set up, it is very easy to "checkpoint"
	your programs.  If at some point you discover you've gone down
	a wrong path and want to retrieve code that you have since
	modified, you can do this very easily. </li>
<li> Every semester, a few students mistakenly submit as a solution to
	a homework assignment a file that
	contains no source code.  We can't give a grade if we have no
	source code, and we usually don't discover the mistake until
	after a model solution has been posted.  Furthermore, I won't
	accept timestamps on either your own PC or your filespace on
	departmental systems as evidence for your having completed the
	assignment on time (these timestamps are easy to fake).
	However, if you have checked
	in a solution to Team Foundation Version Control, I will
	accept that solution using the checkin time as the submission
	time (probably at a small penalty). </li>
<li> You can access your checked-in code from any machine with Visual
	Studio 2013 and internet access. </li>
<li> You will get an introduction to a technology that's indispensable
	for the professional programmer. </li>
</ul>
Setting up source control with Visual Studio requires a few steps:
<ol>
<li> <b>Get a Microsoft® account.</b> If you already have a
    Microsoft account, you can go on to Step 2.  Otherwise, from
    Visual Studio, click the "Sign in" button near the upper right
    corner, then click the "Sign up" link in
    the resulting dialog.  In the account
    setup dialog, the Microsoft account name is any email address you
    want to use to sign in (you can get a new email address from
    Microsoft by clicking the "Or get a new email address" link).  If
    there is any other personal information that you don't feel
    comfortable giving, just leave it out. You will need to verify
    that the email address you provide is yours by clicking a button
    in an email that they send to that address.  This will open a
    sign-in page in a web browser - you will need to sign in here to
    the account you created.  When you get a "Ready to go!" screen,
    your Microsoft account has been successfully created. </li>
<li> <b>Sign in with Visual Studio.</b>  Click on the "Sign in" button
    near the upper right corner of the Visual Studio window, and sign
    in on the resulting dialog with your account name (i.e., email
    address) and password. </li>

<li> <b>Create a Visual Studio account.</b> When you have signed in
    with Visual Studio for the first time, you will be presented a
    dialog to create a Visual Studio account.  Supply the required
    information.  The "Account URL" field is a URL through which you
    will be able to access your Visual Studio account via a web
    browser.  You can fill in anything you want for the first part of
    the URL, but it will be disallowed if it is already taken.  <b>You
    will need to remember this URL</b>.  After
    you have filled in the required fields, click the "Create Account"
    button. </li>

<li> <b>Sign in with your web browser.</b>  After your
      Visual Studio account has been created, you will be sent an
      email informing you that your account is ready.  In that
      message, click on the link to your account URL.  This will take
      you to a page where you can sign in to your Visual Studio
      account through your web browser.  (<b>Note:</b>  If you don't
      get this email right away, try opening the URL you created above
      for your Visual Studio account - you will probably be able to
      sign in to it.)</li>

<li> <b>Create a source control project.</b> Once you have signed in,
      you will be taken to a page to create your first project.  A
      project within a Visual Studio account is different from a
      Visual Studio project (see "<a
      href="/~rhowell/DataStructures/redirect/new-project">Visual
      Studio Solutions"</a>) - it is where one or more Visual Studio
      solutions may be managed.  This may be the only project you
      create, as you can manage all of your assignments in one
      project.  There are some restrictions on the name of a project,
      including the restriction that it cannot be a name used by
      someone else.  For your assignments for this class, you should
      create a project consisting of your name followed by "CIS 300
      Spring 2014"; for example, "Rod Howell CIS 300 Spring 2014".
      You don't need to 
      provide a description.  Leave the other two options at the
      defaults - Team Foundation Version Control and Microsoft Visual
      Studio Scrum 2013.3, respectively.  (<b>Note:</b> You
      <i>must</i> use Team Foundation Version Control for this class.)
      </li>

<li> <b>Connect with Visual Studio.</b> When your project is created,
      you will be taken to a page that tells you this.  On this page,
      click on the button, "Open with Visual Studio to connect".
      Depending on your browser, you may get a dialog asking you to
      confirm that you want to run a program - confirm this.  This
      will open another instance of Visual Studio with the "Team
      Explorer" window open (you might as well close the first
      instance of Visual Studio at this point). </li>

<li> <b>Configure your workspace.</b>  In the Visual Studio Team
      Explorer on the right,
      click one of two links, "Configure your workspace".  To the
      right of the <i>second</i> box under "Configure Workspace",
      click the "..." button and browse to a folder on your U: drive
      where you want to 
      keep all your assignments for the semester.
      Then click the "Map & Get" button.  You should see a message
      near the top of the Team Explorer window: "The workspace was
      mapped successfully."  </li>
<li> <b>Add users.</b>  In order to be able to grade your work, the
      instructor and the GTAs will need to be added as users to your
      Visual Studio account.  To do this, return to your web browser,
      and make sure you are at the top level of your Visual Studio
      account by clicking the "Visual Studio Online" link in the upper
      left-hand corner.  Immediately below this link, click on the
      "Users" link.  Then below "Assign licences", click on "+ Add".
      Enter the sign-in address provided to you by the course
      instructor, and select "Basic" for the license.  Then click the
      "Send Invitation" button.  Repeat this for each user you need to
      add. </li>
<li> <b>Add Members to your project.</b>  In order for the users to be
      able to access your work, they will need to be added to your
      project.  To do this, click on the "Overview" link near the
      upper left-hand corner, then click on your project under "Recent
      projects & teams" (if your project is not shown, click the
      "Browse" link to find it).  On the resulting page, find the
      "Members" section, and click on the "Manage..." link at the
      upper right-hand corner of this section.  In the resulting
      popup, click the "Add..." dropdown and select "Add user".  In
      the "Identities" boxes select each user to add, then click the
      "Save changes" button.</li>
</ol>

At this point, source control is set up
      and ready to use.  Whenever you sign in through Visual Studio,
      you should have access to all of your managed solutions, as
      described in what follows.
<p></p>

To begin using source control, you can either open an existing
    solution within the folder you chose when you configured your
    workspace, or create a new solution in this folder.  To manage
    this solution with source control, open the Solution Explorer,
    right-click on the solution name, and select "Add Solution to
    Source Control..." from the resulting popup menu.  This won't
    upload anything yet - it just defines this solution as one you
    want to manage.  In the Solution Explorer, the various parts of
    the solution will have a green "+" to the left of their names,
    indicating that they belong to managed code.
<p></p>
When you have code that you want to checkpoint, from the Solution
    Explorer, 
    right-click on the solution name and click, "Check In...".
    This will open the Team Explorer showing Pending Changes.  In the
    "Comment" section, you can provide a comment.  This comment should
    be descriptive of this version of the program so that you can find
    it later if you are looking for it.  Then click the "Check In"
    button, and click "Yes" on the resulting Check-in Confirmation
    dialog.  This will upload this version of your solution to your
    Visual Studio account.  As you are editing your code, you can
    periodically check in versions in this way so that you can access
    them later if need be (there is no limit to the storage available
    to you on your Visual Studio account).  Within the Solution
    Explorer, a blue "Checked-in" icon will appear next to each part
    of your solution that is unchanged since its last check-in, and a
    red "Checked out" icon will appear next to each part that has been
    changed since its last check-in.
<p>
Now suppose that at some point in writing a program, you decide you
      want to look at an earlier version that you checked in.  There
      are several ways to do this.  First, you can
      right-click on the 
      file you want in the Solution Explorer and select
      "Source&nbsp;Control&#8209;&gt;View&nbsp;History".  This will open a
      window listing the different versions of this file, together
      with the date and time each was checked in and the comment that
      was supplied for the check-in.  One way of viewing a specific
      version is to right-click on that entry in the list and select
      "Compare..." from the popup menu.  This will open a window
      displaying the checked-in version of this file on the left and
      the current version on the right.  Code that was removed from
      the checked-in version is highlighted in pink, and code in the
      current version that has been added is highlighted in gray.
      Code can be copy-pasted from the earlier version to the current
      version.
</p>
Sometimes you may want to revert back to an earlier version of a
    file.  First, it would be a good idea to check in the current
    version, just in case (this also tends to avoid conflicts that you
    may need to resolve).  To obtain an earlier version of a file, go
    back to the History window for that file, 
    right-click on the version you want, and select "Get This
    Version".  That version will then be opened in Visual Studio as
    the current version.
<p></p>
Alternatively, you may want to revert an entire solution to an earlier
    version.  To do this, right-click on the solution in the Solution
    Explorer, and select
    "Source&nbsp;Control&#8209;&gt;Get&nbsp;Specific&nbsp;Version...".    If
    you want to revert back to the latest version that was checked in
    by a specific date and time, in the resulting dialog, set the type
    to "Date", fill in the date and time you want, and click the "Get"
    button.  Or if you want to browse the available changesets, set the type to
    "Changeset", click the "..." button, optionally narrow down your
    search by a range of changeset numbers or times, and click the
    "Find" button.  This will list all matching changesets, together
    with their checkin times and comments.  Select the one you want
    to revert to by double-clicking, then clicking the "Get" button.
<p>
If you check in a solution after you have reverted to an earlier
      version, conflicts may be detected.  These can usually be
      resolved automatically, but you may need to try checking in
      again in order to complete it.
</p>
It is important to realize that once you have checked in files, they
    are permanently on the server - you can't delete them, either
    intentionally or by accident.  Thus, frequent check-ins might save
    you from a number of problems that might occur.
<p>
There are a lot of other things you can do with source control, but
      most are useful mainly for collaboration on projects.  The
      functionality described here is likely sufficient for your needs
      in CIS 300.
</p>

<p></p>
<div class="NAVBAR">
<a href="/~rhowell/DataStructures/redirect/class-libraries">Next:
      Class Libraries
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/redirect/debugger">Previous: The
      Debugger 
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
	href="/~rhowell/DataStructures/redirect/visual-studio">Up:
      Visual Studio®
      </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a
      href="/~rhowell/DataStructures/">Top</a>
</div>

<p>
<small>
Microsoft and Visual Studio are either registered trademarks or
	trademarks of Microsoft Corporation in the United States
	and/or other countries.
</small>
</p>
<p>
<small>
<!-- hhmts start -->
Last modified: Tue Jan 13 16:59:15 CST 2015
<!-- hhmts end -->
</small>
</p>
<small>
    <i> &copy; Copyright 2014, <a
    href="/~rhowell/">Rod Howell</a>. All
    rights reserved.</i> 
</small>

<p></p>

<table border=0 cellpadding=2 summary="This table is used for layout
purposes only.">
<tr>
<td align=center>
    <a href="http://validator.w3.org/check/referer"><img border="0"
        src="/~rhowell/valid-html401.gif"
        alt="Valid HTML 4.01!" height="31" width="88"></a>
</td>
<tr>
<td>
<a href="http://jigsaw.w3.org/css-validator/check/referer">
             <img border="0"
                  src="/~howell/vcss.gif" 
                  alt="Valid CSS!" height="31" width="88">
            </a>
</td>
</table>

</body>

</html>
